(()=>{"use strict";(()=>{class e{async init(){const t=document.getElementById("meta-age-popup");if(!t)return;if(metaAge.metaAgeRedirectedPayload){try{const t=JSON.parse(metaAge.metaAgeRedirectedPayload.replace(/\\/g,""));await e.verifyAgeOnRedirect(t)}catch(e){console.log(e)}return}setTimeout((()=>{metaAge.isValidMetaAge||-1!==document.cookie.indexOf("isValidMetaAge=")||t.classList.add("meta-age-showing")}),1e3*parseInt(metaAge.settings.delay));const a=document.querySelectorAll(".metaAgeLoginBtn");a?a.forEach((t=>t.addEventListener("click",(t=>e.onClick(t))))):console.log("No login button found!")}static async connectWallet(e){if("phantom"===e)return this.connectSolanaWallet();const t=this.getWalletProvider(e);if(!t)throw new Error("The wallet extension is not installed.<br>Please install it to continue!","red");"coinbase"==e||"wallet_connect"!=e&&1!=this.GetWindowSize()||await t.enable();var a=[];const n=new ethers.providers.Web3Provider(t);try{(a=await n.listAccounts())[0]||await n.send("eth_requestAccounts",[]).then((function(e){a=e}))}catch(e){throw console.log(e),new Error("Failed to connect your wallet!")}if(!window.ethers||!a[0])throw new Error("Service unavailable!");const i=ethers.utils.formatEther(await n.getBalance(a[0]));if(parseFloat(metaAge.settings.min_balance||0)>i)throw new Error("Insufficient balance!");return{account:a[0],balance:i,walletType:e}}static getWalletProvider(e){let t=!1,a=this.GetWindowSize();switch(e){case"coinbase":t="undefined"!=typeof ethereum&&ethereum.providers?ethereum.providers.find((e=>e.isCoinbaseWallet)):!!window.ethereum&&ethereum;break;case"binance":1==a?t=this.GetWalletConnectObject():window.BinanceChain&&(t=window.BinanceChain);break;case"wallet_connect":t=this.GetWalletConnectObject();break;case"phantom":window.solana&&(t=window.solana);break;default:t=1==a?this.GetWalletConnectObject():"undefined"!=typeof ethereum&&ethereum.providers?ethereum.providers.find((e=>e.isMetaMask)):!!window.ethereum&&ethereum}return t}static async onClick(e){const t=document.querySelectorAll(".metaAgeLoginBtn");if(t.forEach((t=>{t!==e.currentTarget&&t.setAttribute("disabled",!0)})),this.isLoading)return;this.isLoading=!0,this.notify(metaAge.i18n.verifyingMessage,"normal");let a,n=e.currentTarget.dataset.wallet;const i=await ethereum.request({method:"eth_chainId"}),o=parseInt(i,16),s=networkInfo.symbols[o]??"Unknown";try{if(a=await this.connectWallet(n),a.link=window.location.href,a.action="meta_age_verify_client",a.ticker=s,networkInfo.testnets.includes(o)){this.notify("Please switch to mainnet.","red");try{await ethereum.request({method:"wallet_switchEthereumChain",params:[{chainId:"0x1"}]});const e=await fetch(metaAge.ajaxURL,{method:"POST",body:new URLSearchParams(a)}),n=(await e.json()).nonce,i=a.account,o=a.balance,r=a.walletType;await this.sign_nonce(n,i,o,r,s,t)}catch(e){console.log(e)}return}}catch(e){return this.isLoading=!1,this.notify("Transaction failed, Please try again!","red"),t.forEach((e=>e.removeAttribute("disabled"))),void window.location.reload()}a.link=window.location.href,a.action="meta_age_verify_client",a.ticker=s;try{const e=await fetch(metaAge.ajaxURL,{method:"POST",body:new URLSearchParams(a)}),n=await e.json();if(n.success){this.notify("Account connected successfully. Please sign with Nonce.","black");const e=n.nonce,i=a.account,o=a.balance,r=a.walletType;await this.sign_nonce(e,i,o,r,s,t)}this.isLoading=!1}catch(e){this.notify("Transaction failed, Please try again!","red"),t.forEach((e=>e.removeAttribute("disabled"))),window.location.reload()}}static ascii_to_hexa(e){for(var t=[],a=0,n=e.length;a<n;a++){var i=Number(e.charCodeAt(a)).toString(16);t.push(i)}return t.join("")}static isInfuraProjectId(){return!(!metaAge.settings.infura_project_id||"undefined"===metaAge.settings.infura_project_id||null===metaAge.settings.infura_project_id||""===metaAge.settings.infura_project_id)}static async verifyAgeOnRedirect(e){const t=await ethereum.request({method:"eth_chainId"}),a=parseInt(t,16),n=networkInfo.symbols[a]??"Unknown";try{e.link=window.location.href,e.action="meta_age_wallet_verify",e.ticker=n;const t=await fetch(metaAge.ajaxURL,{method:"POST",body:new URLSearchParams(e)}),a=await t.json();a.success?(this.notify(a.message,"green"),document.getElementById("meta-age-popup").classList.remove("meta-age-showing")):(document.getElementById("meta-age-popup").classList.add("meta-age-showing"),this.notify(a.message,"red"))}catch(e){console.log(e)}}static GetWindowSize(){return window.innerWidth<=500}static GetWalletConnectObject(){return new WalletConnectProvider.default({infuraId:metaAge.settings.infura_project_id,rpc:{56:"https://bsc-dataseed.binance.org",97:"https://data-seed-prebsc-1-s1.binance.org:8545",137:"https://polygon-rpc.com",43114:"https://api.avax.network/ext/bc/C/rpc"}})}static async connectSolanaWallet(){if(!window.solana)throw new Error("Phantom wallet is not installed.<br>Please install it to continue!");let e,t;try{e=await solana.connect(),t=e.publicKey.toString()}catch(e){throw new Error("Failed to connect your wallet. Please try again!")}if(!window.solanaWeb3||!t)throw new Error("Unable to connect to blockchain network. Please try again!");const a=new solanaWeb3.Connection(solanaWeb3.clusterApiUrl("mainnet-beta"),"confirmed"),n=await a.getBalance(e.publicKey);if(parseFloat(metaAge.settings.min_balance||0)>n)throw new Error("Sorry, insufficient balance!");return{account:t,balance:n,walletType:"phantom"}}static notify(e,t=!1){const a=document.getElementById("meta-age-notice");a&&(t&&!a.classList.contains(t)&&(a.className=t),a.innerHTML=e)}static async sign_nonce(e,t,a,n,i,o){const s=`I am signing my one-time nonce: ${e}`,r=this.ascii_to_hexa(s);try{const e=await ethereum.request({method:"personal_sign",params:[r,t,"Example password"]}),s=await fetch(metaAge.ajaxURL,{method:"POST",body:new URLSearchParams({balance:a,walletType:n,action:"meta_age_wallet_verify",clientUrl:window.location.href,ticker:i,address:t,signature:e})}),c=await s.json();c.success?-1===c.message.indexOf("http")?(this.notify(c.message,"green"),document.getElementById("meta-age-popup").classList.remove("meta-age-showing")):window.location.href=c.message:(this.notify(c.message,"red"),o.forEach((e=>e.removeAttribute("disabled"))))}catch(e){this.notify("Transaction failed, Please try again!","red"),o.forEach((e=>e.removeAttribute("disabled"))),window.location.reload()}}}const t=e;class a{constructor(e,t,a=4e3){this.loaded=!1,this.loading=!1,this.timeout=a,this.lazyScripts=t,this.triggerEvents=e,this.eventCallback=this.load.bind(this)}init(e){setTimeout((()=>{this.loaded||this.loading||this.load()}),this.timeout),window.addEventListener("zzzScriptsLoaded",(()=>this.onLoaded(e))),this.triggerEvents.forEach((t=>window.addEventListener(t,e.eventCallback))),this.lazyScripts.forEach((e=>e.preload&&this.preloadScript(e)))}load(){this.loaded||this.loading||(this.loading=!0,this.lazyScripts.forEach((e=>this.appendScript(e))),this.loaded=!0,this.loading=!1,window.dispatchEvent(new Event("zzzScriptsLoaded")))}onLoaded(e){this.triggerEvents.forEach((t=>window.removeEventListener(t,e.eventCallback))),console.log("Lazy scripts loaded successfully!")}preloadScript(e){if(!e.id||document.getElementById(e.id))return;const t=document.createElement("link");t.id=e.id,t.as="script",t.rel="preload",e.version?t.href=e.uri+"?ver="+e.ver:t.href=e.uri,document.head.append(t)}appendScript(e){const t=document.createElement("script");t.src=e.uri,e.version&&(t.src+="?ver="+e.ver),e.type?t.type=e.type:t.type="text/javascript",document.body.append(t)}}window.addEventListener("DOMContentLoaded",(()=>{const e=new t,n=new a(["load","keydown","mousemove","touchmove","touchstart","touchend","wheel"],[{id:"ethers",uri:metaAge.pluginURI+"assets/js/vendor/ethers.min.js"},{id:"solana",uri:metaAge.pluginURI+"assets/js/vendor/solana.min.js"},{id:"wallet_connect",uri:metaAge.pluginURI+"assets/js/vendor/walletconnect.js"}]);n.init(n),e.init()}))})()})();